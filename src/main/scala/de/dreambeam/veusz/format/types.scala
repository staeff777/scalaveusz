package de.dreambeam.veusz.format

object MarkerType extends Enumeration {
  val None = Value("none")
  val Circle = Value("circle")
  val Diamond = Value("diamond")
  val Square = Value("square")
  val Cross = Value("cross")
  val Plus = Value("plus")
  val Star = Value("star")
  val Dot = Value("dot")
  val LineVert = Value("linevert")
  val LineHorz = Value("linehorz")
  val LineDown = Value("linedown")
  val LineUp = Value("lineup")
  val LineRight = Value("lineright")
  val LineLeft = Value("lineleft")
}

object ErrorType extends Enumeration {
  val Bar = Value("bar")
  val BarEnds = Value("barends")
  val Box = Value("box")
  val Diamond = Value("diamond")
  val Curve = Value("curve")
  val BarBox = Value("barbox")
  val BarDiamond = Value("bardiamond")
  val BarCurve = Value("barcurve")
  val BoxFill = Value("boxfill")
  val DiamondFill = Value("diamondfill")
  val CurveFill = Value("curvefill")
  val FillVert = Value("fillvert")
  val FillHorz = Value("fillhorz")
  val LineVert = Value("linevert")
  val LineHorz = Value("linehorz")
  val LineVertBar = Value("linevertbar")
  val LineHorzBar = Value("linehorzbar")
}

object BarchartErrorType extends Enumeration {
  val None = Value("none")
  val Bar = Value("bar")
  val BarEnds = Value("barends")
}

object BoxplotMarkerType extends Enumeration {
  val Circle = Value("circle")
  val Diamond = Value("diamond")
  val Square = Value("square")
  val Cross = Value("cross")
  val Plus = Value("plus")
  val Star = Value("star")
  val BarHorz = Value("barhorz")
  val BarVert = Value("barvert")
  val Pentagon = Value("pentagon")
  val Hexagon = Value("hexagon")
  val Octogon = Value("octogon")
  val TieVert = Value("tievert")
  val TieHorz = Value("tiehorz")
  val Triangle = Value("triangle")
  val TriangleDown = Value("triangledown")
  val TriangleLeft = Value("triangleleft")
  val TriangleRight = Value("triangleright")
  val Dot = Value("dot")
  val CircleDot = Value("circledot")
  val Bullseye = Value("bullseye")
  val CircleHole = Value("circlehole")
  val SquareHole = Value("squarehole")
  val DiamondHole = Value("diamondhole")
  val PentagonHole = Value("pentagonhole")
  val SquareRounded = Value("squarerounded")
  val SquashBox = Value("squashbox")
  val EllipseHorz = Value("ellipsehorz")
  val EllipseVert = Value("ellipsevert")
  val LozengeHorz = Value("lozengehorz")
  val LozengeVert = Value("lozengevert")
  val PlusNArrow = Value("plusnarrow")
  val CrossNArrow = Value("crossnarrow")
  val CirclePlus = Value("circleplus")
  val CircleCross = Value("circlecross")
  val SquarePlus = Value("squareplus")
  val SquareCross = Value("squarecross")
  val Star3 = Value("star3")
  val Star4 = Value("star4")
  val Star6 = Value("star6")
  val Star8 = Value("star8")
  val StarInvert = Value("starinvert")
  val CirclePairHorz = Value("circlepairhorz")
  val CirclePairVert = Value("circlepairvert")
  val Asterisk = Value("asterisk")
  val LinePlus = Value("lineplus")
  val LineCross = Value("linecross")
  val CrossHair = Value("crosshair")
  val AsteriskHair = Value("asteriskhair")
  val LineVert = Value("linevert")
  val LineHorz = Value("linehorz")
  val LineVertGap = Value("linevertgap")
  val LineHorzGap = Value("linehorzgap")
  val ArrowLeft = Value("arrowleft")
  val ArrowRight = Value("arrowright")
  val ArrowUp = Value("arrowup")
  val ArrowDown = Value("arrowdown")
  val ArrowLeftAway = Value("arrowleftaway")
  val ArrowRightAway = Value("arrowrightaway")
  val ArrowUpAway = Value("arrowupaway")
  val ArrowDownAway = Value("arrowdownaway")
  val LimitUpper = Value("limitupper")
  val LimitLower = Value("limitlower")
  val LimitLeft = Value("limitleft")
  val LimitRight = Value("limitright")
  val LimitUpperAway = Value("limitupperaway")
  val LimitLowerAway = Value("limitloweraway")
  val LimitLeftAway = Value("limitleftaway")
  val LimitRightAway = Value("limitrightaway")
  val LimitUpperAway2 = Value("limitupperaway2")
  val LimitLowerAway2 = Value("limitloweraway2")
  val LimitLeftAway2 = Value("limitleftaway2")
  val LimitRightAway2 = Value("limitrightaway2")
  val ArrowUpperLeftAway = Value("arrowupperleftaway")
  val ArrowUpperRightAway = Value("arrowupperrightaway")
  val ArrowLowerLeftAway = Value("arrowlowerleftaway")
  val ArrowLowerRightAway = Value("arrowlowerrightaway")
  val LineUp = Value("lineup")
  val LineDown = Value("linedown")
  val LineLeft = Value("lineleft")
  val LineRight = Value("lineright")
}

object ArrowType extends Enumeration {
  val None = Value("none")
  val Arrow = Value("arrow")
  val ArrowNarrow = Value("arrownarrow")
  val ArrowTriangle = Value("arrowreverse")
  val LineArrow = Value("linearrow")
  val LineArrowReverse = Value("linearrowreverse")
  val Bar = Value("bar")
  val LineCross = Value("linecross")
  val Asterisk = Value("asterisk")
}